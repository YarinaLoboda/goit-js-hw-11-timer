{"version":3,"sources":["data/timer.js","js/timer-countdown.js","index.js"],"names":["targetDate","selectorId","CountdownTimer","constructor","Date","parse","timerContainer","document","getElementById","getRefsElem","start","alert","dayContainer","querySelector","hourContainer","minContainer","secContainer","deltaTime","now","date","timerID","setInterval","clearInterval","render","getTimeComponents","result","textContent","time","timeComponentArray","days","pad","Math","floor","hours","mins","secs","value","String","padStart","timer"],"mappings":";;;AACA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,WAAA,QAAA,gBAAA,EADA,MAAMA,EAAa,eACnB,QAAA,WAAA,EAAA,MAAMC,EAAa,UAAnB,QAAA,WAAmB;;AC4GnB,aA7GA,IAAA,EAAA,QAAA,iBAEA,MAAMC,EACJC,YAAYF,EAAYD,GACjBA,KAAAA,WAAaI,KAAKC,MAAML,GAExB,KAAKA,YAILC,KAAAA,WAAaA,EACbK,KAAAA,eAAiBC,SAASC,eAAe,KAAKP,YAE9C,KAAKK,gBAKLG,KAAAA,cAEAC,KAAAA,SANHC,MAAM,yBAA2BV,EAAa,MAP9CU,MAAM,+BAAiCX,EAAa,KAgBxDS,cACOG,KAAAA,aAAe,KAAKN,eAAeO,cACtC,2BAGG,KAAKD,cAKLE,KAAAA,cAAgB,KAAKR,eAAeO,cACvC,4BAGG,KAAKC,eAKLC,KAAAA,aAAe,KAAKT,eAAeO,cACtC,2BAGG,KAAKE,cAKLC,KAAAA,aAAe,KAAKV,eAAeO,cACtC,2BAEG,KAAKG,cACRL,MAAM,4CARNA,MAAM,4CATNA,MAAM,6CATNA,MAAM,2CA+BVD,QAGMO,GAFc,KAAKjB,WAAaI,KAAKc,OAExB,EAAbD,CACIE,MAAAA,EAAO,IAAIf,KACjBO,MAAM,0DAA4DQ,QAI/DC,KAAAA,QAAUC,YAAY,KACrB,GAAA,KAAKrB,WAAaI,KAAKc,OAAS,EAGlC,OAFAP,MAAM,yBACNW,cAAc,KAAKF,SAGhBG,KAAAA,OAAO,KAAKC,kBAAkB,KAAKxB,WAAaI,KAAKc,SACzD,KAGLK,OAAOE,GACAb,KAAAA,aAAac,YAAcD,EAAM,KACjCX,KAAAA,cAAcY,YAAcD,EAAM,MAClCV,KAAAA,aAAaW,YAAcD,EAAM,KACjCT,KAAAA,aAAaU,YAAcD,EAAM,KAGxCD,kBAAkBG,GACVC,MAAAA,EAAqB,GAErBC,EAAO,KAAKC,IAAIC,KAAKC,MAAML,EAAQ,QACnCM,EAAQ,KAAKH,IACjBC,KAAKC,MAAOL,EAAQ,MAAyB,OAEzCO,EAAO,KAAKJ,IAAIC,KAAKC,MAAOL,EAAQ,KAAoB,MACxDQ,EAAO,KAAKL,IAAIC,KAAKC,MAAOL,EAAQ,IAAc,MAOjDC,OALPA,EAAkB,KAAWC,EAC7BD,EAAkB,MAAYK,EAC9BL,EAAkB,KAAWM,EAC7BN,EAAkB,KAAWO,EAEtBP,EAGTE,IAAIM,GACKC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,MAIrC,MAAMC,EAAQ,IAAIrC,EAAeD,EAAnB,WAA+BD,EAA/B;;AC1Gd,aAHA,QAAA,oBAGA,QAAA","file":"src.35b9347f.js","sourceRoot":"..\\src","sourcesContent":["const targetDate = 'Oct 25, 2021';\r\nconst selectorId = 'timer-1';\r\n\r\nexport { targetDate, selectorId };\r\n","import { targetDate, selectorId } from '../data/timer';\r\n\r\nclass CountdownTimer {\r\n  constructor(selectorId, targetDate) {\r\n    this.targetDate = Date.parse(targetDate);\r\n\r\n    if (!this.targetDate) {\r\n      alert('Target data is not correct \"' + targetDate + '\"');\r\n      return;\r\n    }\r\n    this.selectorId = selectorId;\r\n    this.timerContainer = document.getElementById(this.selectorId);\r\n\r\n    if (!this.timerContainer) {\r\n      alert('Not find tag with ID \"' + selectorId + '\"');\r\n      return;\r\n    }\r\n\r\n    this.getRefsElem();\r\n\r\n    this.start();\r\n  }\r\n\r\n  getRefsElem() {\r\n    this.dayContainer = this.timerContainer.querySelector(\r\n      'span[data-value=\"days\"]',\r\n    );\r\n\r\n    if (!this.dayContainer) {\r\n      alert('Check tag with class .data-value=\"days\"');\r\n      return;\r\n    }\r\n\r\n    this.hourContainer = this.timerContainer.querySelector(\r\n      'span[data-value=\"hours\"]',\r\n    );\r\n\r\n    if (!this.hourContainer) {\r\n      alert('Check tag with class .data-value=\"hours\"');\r\n      return;\r\n    }\r\n\r\n    this.minContainer = this.timerContainer.querySelector(\r\n      'span[data-value=\"mins\"]',\r\n    );\r\n\r\n    if (!this.minContainer) {\r\n      alert('Check tag with class .data-value=\"mins\"');\r\n      return;\r\n    }\r\n\r\n    this.secContainer = this.timerContainer.querySelector(\r\n      'span[data-value=\"secs\"]',\r\n    );\r\n    if (!this.secContainer) {\r\n      alert('Check tag with class .data-value=\"secs\"');\r\n      return;\r\n    }\r\n  }\r\n\r\n  start() {\r\n    const deltaTime = this.targetDate - Date.now();\r\n\r\n    if (deltaTime <= 0) {\r\n      const date = new Date();\r\n      alert('Target date/time must be greater than the current date ' + date);\r\n      return;\r\n    }\r\n\r\n    this.timerID = setInterval(() => {\r\n      if (this.targetDate - Date.now() <= 0) {\r\n        alert('Time is over !!!');\r\n        clearInterval(this.timerID);\r\n        return;\r\n      }\r\n      this.render(this.getTimeComponents(this.targetDate - Date.now()));\r\n    }, 1000);\r\n  }\r\n\r\n  render(result) {\r\n    this.dayContainer.textContent = result['days'];\r\n    this.hourContainer.textContent = result['hours'];\r\n    this.minContainer.textContent = result['mins'];\r\n    this.secContainer.textContent = result['secs'];\r\n  }\r\n\r\n  getTimeComponents(time) {\r\n    const timeComponentArray = [];\r\n\r\n    const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\r\n    const hours = this.pad(\r\n      Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\r\n    );\r\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\r\n    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\r\n\r\n    timeComponentArray['days'] = days;\r\n    timeComponentArray['hours'] = hours;\r\n    timeComponentArray['mins'] = mins;\r\n    timeComponentArray['secs'] = secs;\r\n\r\n    return timeComponentArray;\r\n  }\r\n\r\n  pad(value) {\r\n    return String(value).padStart(2, '0');\r\n  }\r\n}\r\n\r\nconst timer = new CountdownTimer(selectorId, targetDate);\r\n","import './sass/main.scss';\n// import './js/color-switcher'; //task1\n// import './js/promise'; //task2\nimport './js/timer-countdown'; //task3\n"]}